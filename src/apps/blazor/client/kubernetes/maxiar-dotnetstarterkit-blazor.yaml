---
# Source: maxiar-dotnetstarterkit-blazor/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: maxiar-dotnetstarterkit-blazor
data:
---
# Source: maxiar-dotnetstarterkit-blazor/templates/configmap-logging-files.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: maxiar-dotnetstarterkit-blazor-logging-files
data:
  envsubst_on_yamls.sh: |
    #!/bin/sh
    set -e
    exec 3>&1
    ME=$(basename $0)
    auto_envsubst() {
      local template_dir="${KTCVAR_Security_IdentityJson_TEMPLATE_DIR:-/config-tpl}"
      local suffix="${KTCVAR_Security_IdentityJson_TEMPLATE_SUFFIX:-.template}"
      local output_dir="${KTCVAR_Security_IdentityJson_OUTPUT_DIR:-/usr/share/filebeat}"
      echo "template_dir is [$template_dir]"
      echo "suffix is [$suffix]"
      echo "output_dir is [$output_dir]"
      local template defined_envs relative_path output_path subdir
      defined_envs=$(printf '${%s} ' $(env | cut -d= -f1))
      [ -d "$template_dir" ] || return 0
      if [ ! -w "$output_dir" ]; then
        echo >&3 "$ME: ERROR: $template_dir exists, but $output_dir is not writable"
        return 0
      fi
      find "$template_dir" -follow -type f -name "*$suffix" -print | while read -r template; do
        relative_path="${template#$template_dir/}"
        output_path="$output_dir/${relative_path%$suffix}"
        subdir=$(dirname "$relative_path")
        # create a subdirectory where the template file exists
        mkdir -p "$output_dir/$subdir"
        echo >&3 "$ME: Running envsubst on $template to $output_path"
        envsubst "$defined_envs" < "$template" > "$output_path"
      done
    }
    auto_envsubst
    exit 0
  filebeat.yml: |
    filebeat:
      config:
        modules:
          path: /usr/share/filebeat/modules.d/*.yml
          reload:
            enabled: true
      modules:
      - module: nginx
        access:
          var.paths: ["/var/log/nginx/access.log*"]
        error:
          var.paths: ["/var/log/nginx/error.log*"]
    output:
      elasticsearch:
        hosts: ["${KTCVAR_Frontend_Global__ElasticHost}"]
---
# Source: maxiar-dotnetstarterkit-blazor/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: maxiar-dotnetstarterkit-blazor
data: 
  Frontend_FSHStarterBlazorClient_Settings__AppSettingsTemplate: /usr/share/nginx/html/appsettings.json.TEMPLATE
  Frontend_FSHStarterBlazorClient_Settings__AppSettingsJson: /usr/share/nginx/html/appsettings.json
  #ASPNETCORE_ENVIRONMENT: "Development"
  #ASPNETCORE_URLS: https://*:443;http://*:80
  #ASPNETCORE_HTTPS_PORT: "443"
  #ASPNETCORE_Kestrel__Certificates__Default__Password: password!
  #ASPNETCORE_Kestrel__Certificates__Default__Path: /https/cert.pfx
  FSHStarterBlazorClient_ApiBaseUrl:  https://dotnetstarterkitwebapi.dumm3.ingress
---
# Source: maxiar-dotnetstarterkit-blazor/templates/service-external-grafana.yaml
apiVersion: v1
kind: Service
metadata:
  name: maxiar-dotnetstarterkit-blazor-grafana
spec:
  type: ExternalName
  externalName: grafana.monitoring.svc.cluster.local
---
# Source: maxiar-dotnetstarterkit-blazor/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    helm.sh/chart: maxiar-dotnetstarterkit-blazor-2.0.2
    app.kubernetes.io/name: maxiar-dotnetstarterkit-blazor
    app.kubernetes.io/instance: maxiar-dotnetstarterkit-blazor
    app.kubernetes.io/version: "v2.0.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: frontend
  name: maxiar-dotnetstarterkit-blazor
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80
  selector:
      app.kubernetes.io/name: maxiar-dotnetstarterkit-blazor
      app.kubernetes.io/instance: maxiar-dotnetstarterkit-blazor
  type: ClusterIP
---
# Source: maxiar-dotnetstarterkit-blazor/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: maxiar-dotnetstarterkit-blazor
  labels:
    helm.sh/chart: maxiar-dotnetstarterkit-blazor-2.0.2
    app.kubernetes.io/name: maxiar-dotnetstarterkit-blazor
    app.kubernetes.io/instance: maxiar-dotnetstarterkit-blazor
    app.kubernetes.io/version: "v2.0.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: maxiar-dotnetstarterkit-blazor
      app.kubernetes.io/instance: maxiar-dotnetstarterkit-blazor
  template:
    metadata:
      annotations:
        checksum/config: f23b408afbd9731e9427ebd78b77b53fe90cad2d6aef14272518271154a02b53
        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
      labels:
        app.kubernetes.io/name: maxiar-dotnetstarterkit-blazor
        app.kubernetes.io/instance: maxiar-dotnetstarterkit-blazor
    spec:
      imagePullSecrets:
        - name: maxiar-dotnetstarterkit-blazor-artifactorycredentialsinfra
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: maxiar-dotnetstarterkit-blazor
          securityContext:
            {}
          image: "ghcr.io/maxiar/blazor:latest"
          command: ["/bin/sh",  "-c", "envsubst < $${Frontend_FSHStarterBlazorClient_Settings__AppSettingsTemplate} > $${Frontend_FSHStarterBlazorClient_Settings__AppSettingsJson} && find /usr/share/nginx/html -type f | xargs chmod +r && exec nginx -g 'daemon off;'"]
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          envFrom:
          # Load the Complete ConfigMap and Secrets
          - configMapRef:
              name: maxiar-dotnetstarterkit-blazor
          - secretRef:
              name: maxiar-dotnetstarterkit-blazor
---
# Source: maxiar-dotnetstarterkit-blazor/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: maxiar-dotnetstarterkit-blazor
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
spec:
  tls:
    - hosts:
      - chart-example.local
      secretName: chart-example-tls
  rules:
    - host: chart-example.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: maxiar-dotnetstarterkit-blazor
                port:
                  number: 80
